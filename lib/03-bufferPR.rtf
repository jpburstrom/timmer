{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 EnvyCodeR;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;
\red191\green0\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs22 \cf2 BP\cf3 .freeType(\cf4 \\timmerBuf\cf3 );\
\
\cf5 //Making our own proto\cf3 \
\cf2 PR\cf3 (\cf4 \\basicBufferPlayer\cf3 ).v.clone(\{\
		\
		~def = \cf6 "timmer.grain1"\cf3 ;\
		\
		\cf5 //Sensible defaults \cf3 \
		~bufIndex = 0;\
		\cf5 //TODO: add attack + decay\cf3 \
		~attack = 0.01;\
		~decay = 0.01;\
		~time = \cf2 Pwhite\cf3 (1, 3, \cf2 inf\cf3 ) * 0.25;\
		~delta = \cf2 Pkey\cf3 (\cf4 \\time\cf3 );\
		~rate = \cf2 Pwhite\cf3 (0.9, 1.5, \cf2 inf\cf3 );\
		~start = \cf2 Pfunc\cf3 (\{ \cf2 |ev|\cf3  rrand(0.0, ~buffers[ev[\cf4 \\bufIndex\cf3 ]].duration - (ev[\cf4 \\time\cf3 ] * ev[\cf4 \\rate\cf3 ]))\
			* ~buffers[ev[\cf4 \\bufIndex\cf3 ]].sampleRate \});\
		~amp = \cf2 Pexprand\cf3 (0.1, 0.9, \cf2 inf\cf3 );\
		~pan = \cf2 Pwhite\cf3 (-1.0, 1.0, \cf2 inf\cf3 );\
		~inChannels = 2;\
		~bufPaths = [\cf6 "/Volumes/Mega/projects/timmer/render/part1-samples/nr/Gnid-short-20110825-003 20110825-175629.wav"\cf3 ];\
		\
		~playerPattern = \{\
			~argPairsStream = \cf2 Pbind\cf3 (*~argPairs).asStream;\
			\cf2 Pbind\cf3 (\cf4 \\instrument\cf3 , \cf2 BPStream\cf3 (\cf4 \\def\cf3 ),\
				\cf4 \\bufIndex\cf3 , \cf2 BPStream\cf3 (\cf4 \\bufIndex\cf3 ),\
				\cf4 \\bufnum\cf3 , \cf2 Pfunc\cf3 (\{ \cf2 |ev|\cf3  ~buffers[ev[\cf4 \\bufIndex\cf3 ]].bufnum \}),\
				\cf4 \\time\cf3 , \cf2 BPStream\cf3 (\cf4 \\time\cf3 ).collect(\{ \cf2 |time, ev|\cf3  ~timeConversion.(time, ev) \}),\
				\cf4 \\rate\cf3 , \cf2 BPStream\cf3 (\cf4 \\rate\cf3 ),\
				\cf4 \\start\cf3 , \cf2 BPStream\cf3 (\cf4 \\start\cf3 ),\
				\cf4 \\amp\cf3 , \cf2 BPStream\cf3 (\cf4 \\amp\cf3 ),\
				\cf4 \\pan\cf3 , \cf2 BPStream\cf3 (\cf4 \\pan\cf3 ),\
				\cf4 \\attack\cf3 , \cf2 BPStream\cf3 (\cf4 \\attack\cf3 ),\
				\cf4 \\decay\cf3 , \cf2 BPStream\cf3 (\cf4 \\decay\cf3 ),\
				\cf4 \\chan\cf3 , ~chan,\
				\cf4 \\delta\cf3 , \cf2 BPStream\cf3 (\cf4 \\delta\cf3 ),\
				\cf4 \\time\cf3 , \cf2 Pkey\cf3 (\cf4 \\time\cf3 ) / \cf2 Pfunc\cf3 (\{ \cf2 thisThread\cf3 .clock.tempo \})\
			).collect(\{ \cf2 |ev|\cf3 \
				~argPairsStream !? \{ ev = ~argPairsStream.next(ev) \};\
				ev\
			\});	\
		\};\
		\
		\cf5 //asPattern should just be calling the subpatterns, i think\cf3 \
		~asPattern = \{\
			\cf5 // assume that if we're calling asPattern, we want to reset all streams\cf3 \
			~sendSynthDef.value;\
			~playerPattern.value;\
		\};\
		~stopCleanup = \{\
		\};\
		\
		~postMCCreation = \{\
		\}\
		\
\}) => \cf2 PR\cf3 (\cf4 \\timmerBufferPlayer\cf3 ).subType_(\cf4 \\timmerBuf\cf3 );\
\
\cf5 //A test, making another PR\cf3 \
\cf2 PR\cf3 (\cf4 \\timmerBufferPlayer\cf3 ).v.clone(\{\
	~bufPaths =  \cf2 BP\cf3 (\cf4 \\q\cf3 ).paths(\cf4 \\test\cf3 , \cf4 \\Turnoff_20110825_013_20110825_175526\cf3 )\
\}) => \cf2 PR\cf3 (\cf4 \\test_yo\cf3 ).subType_(\cf4 \\timmerBuf\cf3 );\
\
\cf5 /*\
\
BP.freeType(\\timmerBuf)\
\
//Preparation:\
\
\
\
PR(\\test_yo) => BP(\\test_yo_player)\
\
BP(\\test_yo_player).play(0)\
BP(\\test_yo_player).free\
BP\
\
Tests:\
(\
//Pseg - breakpoint curve (val, dur, curve type)\
BP(\\test).amp = Pseg(Pseq([0.001, 1], 1), 25, 'exponential') ++ Pseq([1], inf);\
BP(\\test).rate = 1; // Pseg(Pseq([0.6, 1], 1), 25, 'exponential');\
BP(\\test).time = Pseg(Pseq([0.002, 3], 1), 25, 'exponential');\
BP(\\test).amp = 1;\
BP(\\test).decay = 0.02;\
//Plprand: random numbers, leaning towards the lower\
BP(\\test).delta_(Plprand(0.005, 1));\
BP(\\turnoff).play(0); \
)\
\
\
BP(\\test2).free\
//Creating an effects bus - pass the channel of the BP\
PR(\\timmerFx).chuck(BP(\\test2), parms: (chan: BP(\\test).chan));\
//Take care of playing and stopping the bus yourself\
//Stop doesn't free the effect - later on we will do some nice fade-out\
BP(\\test2).play(0)\
BP(\\test2).stop(0)\
BP(\\test2).free\
\
\
s.queryAllNodes\
\
*/\cf3 \
}